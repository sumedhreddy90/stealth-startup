{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sumedhreddy/Documents/stealth/stealth-startup/src/screens/RegisterScreen.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport ReactNativeModal from \"react-native-modal\";\nimport SafeAreaView from \"react-native-safe-area-view\";\nimport { TextInput, Separator, PrimaryButton, HeaderLine, KeyboardView, Text, CheckBox, HtmlView } from \"../components\";\nimport { AuthenticationContext } from \"../context\";\nimport { useLocalization } from \"../localization\";\nimport { AuthService, AppSettingsService } from \"../services\";\nimport { useTheme } from \"../theme\";\nvar WIDTH = Dimensions.get(\"screen\").width;\nexport var RegisterScreen = function RegisterScreen() {\n  var authContext = useContext(AuthenticationContext);\n  var navigation = useNavigation();\n\n  var _useLocalization = useLocalization(),\n      getString = _useLocalization.getString;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors,\n      sizes = _useTheme.sizes;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstName = _useState2[0],\n      setFirstName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastName = _useState4[0],\n      setLastName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      username = _useState8[0],\n      setUsername = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      password = _useState10[0],\n      setPassword = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      userTermsShowModal = _useState12[0],\n      setUserTermsShowModal = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userTermsText = _useState14[0],\n      setUserTermsText = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      userTermsConfirm = _useState16[0],\n      setUserTermsConfirm = _useState16[1];\n\n  var onClickBackToLogin = function onClickBackToLogin() {\n    return navigation.goBack();\n  };\n\n  var onClickRegister = function onClickRegister() {\n    if (firstName === \"\" || lastName === \"\" || email === \"\" || username === \"\" || password === \"\") {\n      Alert.alert(getString(\"please_fill_fields\"));\n      return;\n    }\n\n    if (!userTermsConfirm) {\n      Alert.alert(getString(\"you_must_confirm_user_terms\"));\n      return;\n    }\n\n    AuthService.register(firstName, lastName, email, username, password).then(function _callee(user) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(authContext.login(user));\n\n            case 2:\n              navigation.goBack();\n              navigation.goBack();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }).catch(function (e) {\n      return Alert.alert(e.message);\n    });\n  };\n\n  useEffect(function () {\n    AppSettingsService.getAppSettings().then(function (res) {\n      return setUserTermsText(res.data.userTerms);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(SafeAreaView, {\n    style: styles.container,\n    forceInset: {\n      top: \"always\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, React.createElement(KeyboardView, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.contentContainerStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: [styles.titleText, {\n      color: colors.primaryColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, getString(\"register_upper\")), React.createElement(TextInput, {\n    inputProps: {\n      placeholder: getString(\"first_name\"),\n      value: firstName,\n      onChangeText: setFirstName\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), React.createElement(Separator, {\n    height: 16,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    inputProps: {\n      placeholder: getString(\"last_name\"),\n      value: lastName,\n      onChangeText: setLastName\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), React.createElement(Separator, {\n    height: 16,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    inputProps: {\n      placeholder: getString(\"email\"),\n      value: email,\n      onChangeText: setEmail\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), React.createElement(Separator, {\n    height: 16,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    inputProps: {\n      placeholder: getString(\"username\"),\n      value: username,\n      onChangeText: setUsername\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), React.createElement(Separator, {\n    height: 16,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    inputProps: {\n      placeholder: getString(\"password\"),\n      secureTextEntry: true,\n      value: password,\n      onChangeText: setPassword\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), React.createElement(Separator, {\n    height: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), React.createElement(CheckBox, {\n    text: getString(\"user_term_confirm_text\"),\n    isChecked: userTermsConfirm,\n    onPress: function onPress() {\n      if (userTermsConfirm) setUserTermsConfirm(false);else setUserTermsShowModal(true);\n    },\n    style: {\n      marginStart: 4\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), React.createElement(Separator, {\n    height: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), React.createElement(PrimaryButton, {\n    title: getString(\"register_upper\"),\n    onPress: onClickRegister,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.registerButton,\n    onPress: onClickBackToLogin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: colors.gray\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, getString(\"back_to_login\"))))), React.createElement(HeaderLine, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  })), React.createElement(ReactNativeModal, {\n    isVisible: userTermsShowModal,\n    style: {\n      margin: 16\n    },\n    backdropOpacity: 0.5,\n    swipeDirection: \"down\",\n    onSwipeComplete: function onSwipeComplete() {\n      return setUserTermsShowModal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, React.createElement(SafeAreaView, {\n    forceInset: {\n      top: \"always\",\n      bottom: \"always\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    style: [styles.modalContainer, {\n      backgroundColor: colors.windowBackground\n    }],\n    contentContainerStyle: styles.modalContentContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, React.createElement(HtmlView, {\n    htmlContent: userTermsText,\n    imagesMaxWidthOffset: WIDTH - 32,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), React.createElement(PrimaryButton, {\n    title: getString(\"confirm\"),\n    onPress: function onPress() {\n      setUserTermsShowModal(false);\n      setUserTermsConfirm(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  })))));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  content: {\n    flex: 1\n  },\n  contentContainerStyle: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    padding: 16\n  },\n  titleText: {\n    fontSize: 42,\n    fontFamily: \"default-light\",\n    marginBottom: 24\n  },\n  registerButton: {\n    alignSelf: \"center\",\n    marginTop: 12,\n    paddingVertical: 12,\n    paddingHorizontal: 32\n  },\n  modalContainer: {\n    borderRadius: 12\n  },\n  modalContentContainer: {\n    padding: 16\n  }\n});","map":{"version":3,"sources":["/Users/sumedhreddy/Documents/stealth/stealth-startup/src/screens/RegisterScreen.tsx"],"names":["useNavigation","React","useState","useContext","useEffect","ScrollView","ReactNativeModal","SafeAreaView","TextInput","Separator","PrimaryButton","HeaderLine","KeyboardView","Text","CheckBox","HtmlView","AuthenticationContext","useLocalization","AuthService","AppSettingsService","useTheme","WIDTH","Dimensions","get","width","RegisterScreen","authContext","navigation","getString","colors","sizes","firstName","setFirstName","lastName","setLastName","email","setEmail","username","setUsername","password","setPassword","userTermsShowModal","setUserTermsShowModal","userTermsText","setUserTermsText","userTermsConfirm","setUserTermsConfirm","onClickBackToLogin","goBack","onClickRegister","Alert","alert","register","then","user","login","catch","e","message","getAppSettings","res","data","userTerms","styles","container","top","content","contentContainerStyle","titleText","color","primaryColor","placeholder","value","onChangeText","secureTextEntry","marginStart","registerButton","gray","margin","bottom","modalContainer","backgroundColor","windowBackground","modalContentContainer","StyleSheet","create","flex","flexGrow","justifyContent","padding","fontSize","fontFamily","marginBottom","alignSelf","marginTop","paddingVertical","paddingHorizontal","borderRadius"],"mappings":"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","sourcesContent":["import { useNavigation } from \"@react-navigation/native\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { StyleSheet, TouchableOpacity, Alert, Dimensions } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport ReactNativeModal from \"react-native-modal\";\nimport SafeAreaView from \"react-native-safe-area-view\";\n\nimport {\n  TextInput,\n  Separator,\n  PrimaryButton,\n  HeaderLine,\n  KeyboardView,\n  Text,\n  CheckBox,\n  HtmlView,\n} from \"../components\";\nimport { AuthenticationContext } from \"../context\";\nimport { useLocalization } from \"../localization\";\nimport { AuthService, AppSettingsService } from \"../services\";\nimport { useTheme } from \"../theme\";\n\nconst WIDTH = Dimensions.get(\"screen\").width;\n\nexport const RegisterScreen = () => {\n  const authContext = useContext(AuthenticationContext);\n  const navigation = useNavigation();\n  const { getString } = useLocalization();\n  const { colors, sizes } = useTheme();\n\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [userTermsShowModal, setUserTermsShowModal] = useState(false);\n  const [userTermsText, setUserTermsText] = useState(\"\");\n  const [userTermsConfirm, setUserTermsConfirm] = useState(false);\n\n  const onClickBackToLogin = () => navigation.goBack();\n\n  const onClickRegister = () => {\n    if (\n      firstName === \"\" ||\n      lastName === \"\" ||\n      email === \"\" ||\n      username === \"\" ||\n      password === \"\"\n    ) {\n      Alert.alert(getString(\"please_fill_fields\"));\n      return;\n    }\n    if (!userTermsConfirm) {\n      Alert.alert(getString(\"you_must_confirm_user_terms\"));\n      return;\n    }\n\n    AuthService.register(firstName, lastName, email, username, password)\n      .then(async (user) => {\n        await authContext.login(user);\n        // x2 goback for first and register screens.\n        navigation.goBack();\n        navigation.goBack();\n      })\n      .catch((e) => Alert.alert(e.message));\n  };\n\n  useEffect(() => {\n    AppSettingsService.getAppSettings().then((res) =>\n      setUserTermsText(res.data.userTerms)\n    );\n  }, []);\n\n  return (\n    <>\n      <SafeAreaView style={styles.container} forceInset={{ top: \"always\" }}>\n        <KeyboardView style={styles.content}>\n          <ScrollView contentContainerStyle={styles.contentContainerStyle}>\n            <Text style={[styles.titleText, { color: colors.primaryColor }]}>\n              {getString(\"register_upper\")}\n            </Text>\n            <TextInput\n              inputProps={{\n                placeholder: getString(\"first_name\"),\n                value: firstName,\n                onChangeText: setFirstName,\n              }}\n            />\n            <Separator height={16} />\n            <TextInput\n              inputProps={{\n                placeholder: getString(\"last_name\"),\n                value: lastName,\n                onChangeText: setLastName,\n              }}\n            />\n            <Separator height={16} />\n            <TextInput\n              inputProps={{\n                placeholder: getString(\"email\"),\n                value: email,\n                onChangeText: setEmail,\n              }}\n            />\n            <Separator height={16} />\n            <TextInput\n              inputProps={{\n                placeholder: getString(\"username\"),\n                value: username,\n                onChangeText: setUsername,\n              }}\n            />\n            <Separator height={16} />\n            <TextInput\n              inputProps={{\n                placeholder: getString(\"password\"),\n                secureTextEntry: true,\n                value: password,\n                onChangeText: setPassword,\n              }}\n            />\n            <Separator height={24} />\n            <CheckBox\n              text={getString(\"user_term_confirm_text\")}\n              isChecked={userTermsConfirm}\n              onPress={() => {\n                if (userTermsConfirm) setUserTermsConfirm(false);\n                else setUserTermsShowModal(true);\n              }}\n              style={{ marginStart: 4 }}\n            />\n            <Separator height={24} />\n            <PrimaryButton\n              title={getString(\"register_upper\")}\n              onPress={onClickRegister}\n            />\n            <TouchableOpacity\n              style={styles.registerButton}\n              onPress={onClickBackToLogin}\n            >\n              <Text style={{ color: colors.gray }}>\n                {getString(\"back_to_login\")}\n              </Text>\n            </TouchableOpacity>\n          </ScrollView>\n        </KeyboardView>\n        <HeaderLine />\n      </SafeAreaView>\n      <ReactNativeModal\n        isVisible={userTermsShowModal}\n        style={{ margin: 16 }}\n        backdropOpacity={0.5}\n        swipeDirection=\"down\"\n        onSwipeComplete={() => setUserTermsShowModal(false)}\n      >\n        <SafeAreaView forceInset={{ top: \"always\", bottom: \"always\" }}>\n          <ScrollView\n            style={[\n              styles.modalContainer,\n              {\n                backgroundColor: colors.windowBackground,\n              },\n            ]}\n            contentContainerStyle={styles.modalContentContainer}\n          >\n            <HtmlView\n              htmlContent={userTermsText}\n              imagesMaxWidthOffset={WIDTH - 32}\n            />\n            <PrimaryButton\n              title={getString(\"confirm\")}\n              onPress={() => {\n                setUserTermsShowModal(false);\n                setUserTermsConfirm(true);\n              }}\n            />\n          </ScrollView>\n        </SafeAreaView>\n      </ReactNativeModal>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n  contentContainerStyle: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    padding: 16,\n  },\n  titleText: {\n    fontSize: 42,\n    fontFamily: \"default-light\",\n    marginBottom: 24,\n  },\n  registerButton: {\n    alignSelf: \"center\",\n    marginTop: 12,\n    paddingVertical: 12,\n    paddingHorizontal: 32,\n  },\n  modalContainer: {\n    borderRadius: 12,\n  },\n  modalContentContainer: {\n    padding: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}