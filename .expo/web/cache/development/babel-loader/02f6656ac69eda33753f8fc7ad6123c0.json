{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sumedhreddy/Documents/stealth/stealth-startup/src/screens/MenuScreen.tsx\";\n\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { Divider, TouchableHighlight, Text } from \"../components\";\nimport NavigationNames from \"../navigations/NavigationNames\";\nimport { useTheme } from \"../theme\";\nimport { useLocalization } from \"../localization\";\nimport { AuthenticationContext } from \"../context\";\nimport { AppSettingsService } from \"../services\";\nimport { SettingsBottomSheet } from \"../modals\";\n\nvar getMenuItems = function getMenuItems(getString) {\n  return [{\n    title: getString(\"facebook\"),\n    iconName: \"logo-facebook\",\n    actionName: \"openLink\",\n    appSettingsKey: \"facebookUrl\"\n  }, {\n    title: getString(\"twitter\"),\n    iconName: \"logo-twitter\",\n    actionName: \"openLink\",\n    appSettingsKey: \"twitterUrl\"\n  }, {\n    title: getString(\"youtube\"),\n    iconName: \"logo-youtube\",\n    actionName: \"openLink\",\n    appSettingsKey: \"youtubeUrl\"\n  }, {\n    title: getString(\"instagram\"),\n    iconName: \"logo-instagram\",\n    actionName: \"openLink\",\n    appSettingsKey: \"instagramUrl\"\n  }, {\n    title: getString(\"about_us\"),\n    iconName: \"ios-business\",\n    navigateToScreen: NavigationNames.AboutUsScreen\n  }, {\n    title: getString(\"contact_us\"),\n    iconName: \"ios-mail\",\n    actionName: \"openEmail\"\n  }, {\n    title: getString(\"privacy_policy\"),\n    iconName: \"ios-leaf\",\n    navigateToScreen: NavigationNames.PrivacyPolicyScreen\n  }, {\n    title: getString(\"settings\"),\n    iconName: \"md-settings\",\n    actionName: \"openSettings\"\n  }];\n};\n\nexport var MenuScreen = function MenuScreen() {\n  var navigation = useNavigation();\n\n  var _useLocalization = useLocalization(),\n      getString = _useLocalization.getString;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var authContext = useContext(AuthenticationContext);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      appSettings = _useState2[0],\n      setAppSettings = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isVisibleSettingModal = _useState4[0],\n      setIsVisibleSettingModal = _useState4[1];\n\n  var menuItems = getMenuItems(getString);\n\n  if (authContext.isLoggedIn) {\n    menuItems = [].concat(_toConsumableArray(menuItems), [{\n      title: getString(\"logout\"),\n      iconName: \"md-log-out\",\n      actionName: \"logout\"\n    }]);\n  }\n\n  var onPressMenuItemClick = function onPressMenuItemClick(item) {\n    if (item.actionName === \"openSettings\") {\n      setIsVisibleSettingModal(true);\n    } else if (item.actionName === \"logout\") {\n      Alert.alert(getString(\"logout\"), getString(\"logout_message\"), [{\n        text: getString(\"cancel\"),\n        style: \"cancel\"\n      }, {\n        text: getString(\"yes\"),\n        onPress: function onPress() {\n          return authContext.logout();\n        }\n      }], {\n        cancelable: false\n      });\n    } else if (item.navigateToScreen) {\n      navigation.navigate(item.navigateToScreen);\n    } else if (item.actionName === \"openEmail\") {\n      var email = appSettings == null ? void 0 : appSettings.email;\n\n      if (email) {\n        Linking.openURL(\"mailto:\" + (appSettings == null ? void 0 : appSettings.email));\n      }\n    } else if (item.actionName === \"openLink\") {\n      var link = appSettings[item.appSettingsKey];\n\n      if (link) {\n        Linking.openURL(link);\n      }\n    }\n  };\n\n  useEffect(function () {\n    AppSettingsService.getAppSettings().then(function (res) {\n      return setAppSettings(res.data);\n    }).catch(function (err) {\n      return Alert.alert(err.messsage);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(FlatList, {\n    data: menuItems,\n    keyExtractor: function keyExtractor(_, index) {\n      return \"key\" + index + \"ForMenu\";\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          return onPressMenuItemClick(item);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: styles.itemContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.iconContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, React.createElement(Ionicons, {\n        name: item.iconName,\n        size: 24,\n        color: colors.gray,\n        style: styles.icon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      })), React.createElement(Text, {\n        style: styles.titleText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      }, item.title), React.createElement(Ionicons, {\n        name: \"ios-arrow-forward\",\n        size: 24,\n        color: colors.gray,\n        style: {\n          transform: [{\n            scaleX: I18nManager.isRTL ? -1 : 1\n          }]\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      })));\n    },\n    ItemSeparatorComponent: function ItemSeparatorComponent() {\n      return React.createElement(Divider, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 39\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), React.createElement(SettingsBottomSheet, {\n    isVisible: isVisibleSettingModal,\n    onDismissModal: function onDismissModal() {\n      return setIsVisibleSettingModal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  flex1: {\n    flex: 1\n  },\n  itemContainer: {\n    flexDirection: \"row\",\n    paddingVertical: 18,\n    paddingEnd: 18,\n    paddingStart: 0\n  },\n  iconContainer: {\n    width: 60,\n    alignSelf: \"center\"\n  },\n  icon: {\n    alignSelf: \"center\"\n  },\n  titleText: {\n    flex: 1,\n    alignSelf: \"center\",\n    fontSize: 17,\n    textAlign: \"justify\"\n  }\n});","map":{"version":3,"sources":["/Users/sumedhreddy/Documents/stealth/stealth-startup/src/screens/MenuScreen.tsx"],"names":["Ionicons","useNavigation","React","useState","useContext","useEffect","Divider","TouchableHighlight","Text","NavigationNames","useTheme","useLocalization","AuthenticationContext","AppSettingsService","SettingsBottomSheet","getMenuItems","getString","title","iconName","actionName","appSettingsKey","navigateToScreen","AboutUsScreen","PrivacyPolicyScreen","MenuScreen","navigation","colors","authContext","appSettings","setAppSettings","isVisibleSettingModal","setIsVisibleSettingModal","menuItems","isLoggedIn","onPressMenuItemClick","item","Alert","alert","text","style","onPress","logout","cancelable","navigate","email","Linking","openURL","link","getAppSettings","then","res","data","catch","err","messsage","_","index","styles","itemContainer","iconContainer","gray","icon","titleText","transform","scaleX","I18nManager","isRTL","StyleSheet","create","container","flex","flex1","flexDirection","paddingVertical","paddingEnd","paddingStart","width","alignSelf","fontSize","textAlign"],"mappings":"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","sourcesContent":["import { Ionicons } from \"@expo/vector-icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport {\n  FlatList,\n  View,\n  StyleSheet,\n  Alert,\n  Linking,\n  I18nManager,\n} from \"react-native\";\nimport { Divider, TouchableHighlight, Text } from \"../components\";\nimport { AppSettingsModel } from \"../models\";\nimport NavigationNames from \"../navigations/NavigationNames\";\nimport { useTheme } from \"../theme\";\nimport { useLocalization } from \"../localization\";\nimport { AuthenticationContext } from \"../context\";\nimport { AppSettingsService } from \"../services\";\nimport { SettingsBottomSheet } from \"../modals\";\n\nconst getMenuItems = (\n  getString: (key: string) => string\n): { title: string; iconName: string; [key: string]: any }[] => [\n  {\n    title: getString(\"facebook\"),\n    iconName: \"logo-facebook\",\n    actionName: \"openLink\",\n    appSettingsKey: \"facebookUrl\",\n  },\n  {\n    title: getString(\"twitter\"),\n    iconName: \"logo-twitter\",\n    actionName: \"openLink\",\n    appSettingsKey: \"twitterUrl\",\n  },\n  {\n    title: getString(\"youtube\"),\n    iconName: \"logo-youtube\",\n    actionName: \"openLink\",\n    appSettingsKey: \"youtubeUrl\",\n  },\n  {\n    title: getString(\"instagram\"),\n    iconName: \"logo-instagram\",\n    actionName: \"openLink\",\n    appSettingsKey: \"instagramUrl\",\n  },\n  {\n    title: getString(\"about_us\"),\n    iconName: \"ios-business\",\n    navigateToScreen: NavigationNames.AboutUsScreen,\n  },\n  {\n    title: getString(\"contact_us\"),\n    iconName: \"ios-mail\",\n    actionName: \"openEmail\",\n  },\n  {\n    title: getString(\"privacy_policy\"),\n    iconName: \"ios-leaf\",\n    navigateToScreen: NavigationNames.PrivacyPolicyScreen,\n  },\n  {\n    title: getString(\"settings\"),\n    iconName: \"md-settings\",\n    actionName: \"openSettings\",\n  },\n];\n\nexport const MenuScreen = () => {\n  const navigation = useNavigation();\n  const { getString } = useLocalization();\n  const { colors } = useTheme();\n  const authContext = useContext(AuthenticationContext);\n\n  const [appSettings, setAppSettings] = useState<AppSettingsModel>();\n  const [isVisibleSettingModal, setIsVisibleSettingModal] = useState(false);\n  var menuItems = getMenuItems(getString);\n\n  if (authContext.isLoggedIn) {\n    menuItems = [\n      ...menuItems,\n      {\n        title: getString(\"logout\"),\n        iconName: \"md-log-out\",\n        actionName: \"logout\",\n      },\n    ];\n  }\n\n  const onPressMenuItemClick = (item: any) => {\n    if (item.actionName === \"openSettings\") {\n      setIsVisibleSettingModal(true);\n    } else if (item.actionName === \"logout\") {\n      Alert.alert(\n        getString(\"logout\"),\n        getString(\"logout_message\"),\n        [\n          {\n            text: getString(\"cancel\"),\n            style: \"cancel\",\n          },\n          { text: getString(\"yes\"), onPress: () => authContext.logout() },\n        ],\n        { cancelable: false }\n      );\n    } else if (item.navigateToScreen) {\n      navigation.navigate(item.navigateToScreen);\n    } else if (item.actionName === \"openEmail\") {\n      const email = appSettings?.email;\n      if (email) {\n        Linking.openURL(`mailto:${appSettings?.email}`);\n      }\n    } else if (item.actionName === \"openLink\") {\n      const link = (appSettings as any)[item.appSettingsKey];\n      if (link) {\n        Linking.openURL(link);\n      }\n    }\n  };\n\n  useEffect(() => {\n    AppSettingsService.getAppSettings()\n      .then((res) => setAppSettings(res.data))\n      .catch((err) => Alert.alert(err.messsage));\n  }, []);\n\n  return (\n    <>\n      <FlatList\n        data={menuItems}\n        keyExtractor={(_, index) => `key${index}ForMenu`}\n        renderItem={({ item }) => (\n          <TouchableHighlight onPress={() => onPressMenuItemClick(item)}>\n            <View style={styles.itemContainer}>\n              <View style={styles.iconContainer}>\n                <Ionicons\n                  name={item.iconName}\n                  size={24}\n                  color={colors.gray}\n                  style={styles.icon}\n                />\n              </View>\n              <Text style={styles.titleText}>{item.title}</Text>\n              <Ionicons\n                name=\"ios-arrow-forward\"\n                size={24}\n                color={colors.gray}\n                style={{\n                  transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n                }}\n              />\n            </View>\n          </TouchableHighlight>\n        )}\n        ItemSeparatorComponent={() => <Divider />}\n      />\n      <SettingsBottomSheet\n        isVisible={isVisibleSettingModal}\n        onDismissModal={() => setIsVisibleSettingModal(false)}\n      />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1 },\n  flex1: {\n    flex: 1,\n  },\n  itemContainer: {\n    flexDirection: \"row\",\n    paddingVertical: 18,\n    paddingEnd: 18,\n    paddingStart: 0,\n  },\n  iconContainer: {\n    width: 60,\n    alignSelf: \"center\",\n  },\n  icon: { alignSelf: \"center\" },\n  titleText: {\n    flex: 1,\n    alignSelf: \"center\",\n    fontSize: 17,\n    textAlign: \"justify\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}