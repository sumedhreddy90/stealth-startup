{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sumedhreddy/Documents/stealth/stealth-startup/src/screens/LoginScreen.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport React, { useContext, useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-safe-area-view\";\nimport { HeaderLine, PrimaryButton, Separator, TextInput, KeyboardView, Text } from \"../components\";\nimport { AuthenticationContext } from \"../context\";\nimport { useLocalization } from \"../localization\";\nimport NavigationNames from \"../navigations/NavigationNames\";\nimport { AuthService } from \"../services\";\nimport { useTheme } from \"../theme\";\nexport var LoginScreen = function LoginScreen() {\n  var authContext = useContext(AuthenticationContext);\n  var navigation = useNavigation();\n\n  var _useLocalization = useLocalization(),\n      getString = _useLocalization.getString;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var onClickLogin = function onClickLogin() {\n    if (username === \"\" || password === \"\") {\n      Alert.alert(getString(\"required_login_inputs\"));\n      return;\n    }\n\n    AuthService.login(username, password).then(function _callee(user) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(authContext.login(user));\n\n            case 2:\n              navigation.goBack();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }).catch(function (e) {\n      return Alert.alert(e.message);\n    });\n  };\n\n  var onClickRegister = function onClickRegister() {\n    navigation.navigate(NavigationNames.RegisterScreen);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    forceInset: {\n      top: \"always\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(HeaderLine, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), React.createElement(KeyboardView, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.contentContainerStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: [styles.titleText, {\n      color: colors.primaryColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, getString(\"login_title\")), React.createElement(TextInput, {\n    inputProps: {\n      placeholder: getString(\"username\"),\n      value: username,\n      onChangeText: setUsername\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), React.createElement(Separator, {\n    height: 16,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), React.createElement(TextInput, {\n    inputProps: {\n      placeholder: getString(\"password\"),\n      secureTextEntry: true,\n      textContentType: \"none\",\n      autoCorrect: false,\n      value: password,\n      onChangeText: setPassword\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), React.createElement(Separator, {\n    height: 32,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), React.createElement(PrimaryButton, {\n    title: getString(\"login_upper\"),\n    onPress: onClickLogin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.registerButton,\n    onPress: onClickRegister,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: colors.gray\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, getString(\"register_upper\"))))));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  content: {\n    flex: 1\n  },\n  contentContainerStyle: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    padding: 16\n  },\n  titleText: {\n    fontSize: 42,\n    fontFamily: \"default-light\",\n    marginBottom: 24\n  },\n  registerButton: {\n    alignSelf: \"center\",\n    marginTop: 12,\n    paddingVertical: 12,\n    paddingHorizontal: 32\n  }\n});","map":{"version":3,"sources":["/Users/sumedhreddy/Documents/stealth/stealth-startup/src/screens/LoginScreen.tsx"],"names":["useNavigation","React","useContext","useState","SafeAreaView","HeaderLine","PrimaryButton","Separator","TextInput","KeyboardView","Text","AuthenticationContext","useLocalization","NavigationNames","AuthService","useTheme","LoginScreen","authContext","navigation","getString","colors","username","setUsername","password","setPassword","onClickLogin","Alert","alert","login","then","user","goBack","catch","e","message","onClickRegister","navigate","RegisterScreen","styles","container","top","content","contentContainerStyle","titleText","color","primaryColor","placeholder","value","onChangeText","secureTextEntry","textContentType","autoCorrect","registerButton","gray","StyleSheet","create","flex","justifyContent","flexGrow","padding","fontSize","fontFamily","marginBottom","alignSelf","marginTop","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import { useNavigation } from \"@react-navigation/native\";\nimport React, { useContext, useState } from \"react\";\nimport { Alert, ScrollView, StyleSheet, TouchableOpacity } from \"react-native\";\nimport SafeAreaView from \"react-native-safe-area-view\";\nimport {\n  HeaderLine,\n  PrimaryButton,\n  Separator,\n  TextInput,\n  KeyboardView,\n  Text,\n} from \"../components\";\nimport { AuthenticationContext } from \"../context\";\nimport { useLocalization } from \"../localization\";\nimport NavigationNames from \"../navigations/NavigationNames\";\nimport { AuthService } from \"../services\";\nimport { useTheme } from \"../theme\";\n\nexport const LoginScreen = () => {\n  const authContext = useContext(AuthenticationContext);\n  const navigation = useNavigation();\n  const { getString } = useLocalization();\n  const { colors } = useTheme();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const onClickLogin = () => {\n    if (username === \"\" || password === \"\") {\n      Alert.alert(getString(\"required_login_inputs\"));\n      return;\n    }\n    AuthService.login(username, password)\n      .then(async (user: any) => {\n        await authContext.login(user);\n        navigation.goBack();\n      })\n      .catch((e) => Alert.alert(e.message));\n  };\n\n  const onClickRegister = () => {\n    navigation.navigate(NavigationNames.RegisterScreen);\n  };\n\n  return (\n    <SafeAreaView style={styles.container} forceInset={{ top: \"always\" }}>\n      <HeaderLine />\n      <KeyboardView style={styles.content}>\n        <ScrollView contentContainerStyle={styles.contentContainerStyle}>\n          <Text\n            style={[\n              styles.titleText,\n              {\n                color: colors.primaryColor,\n              },\n            ]}\n          >\n            {getString(\"login_title\")}\n          </Text>\n          <TextInput\n            inputProps={{\n              placeholder: getString(\"username\"),\n              value: username,\n              onChangeText: setUsername,\n            }}\n          />\n          <Separator height={16} />\n          <TextInput\n            inputProps={{\n              placeholder: getString(\"password\"),\n              secureTextEntry: true,\n              textContentType: \"none\",\n              autoCorrect: false,\n              value: password,\n              onChangeText: setPassword,\n            }}\n          />\n          <Separator height={32} />\n          <PrimaryButton\n            title={getString(\"login_upper\")}\n            onPress={onClickLogin}\n          />\n          <TouchableOpacity\n            style={styles.registerButton}\n            onPress={onClickRegister}\n          >\n            <Text style={{ color: colors.gray }}>\n              {getString(\"register_upper\")}\n            </Text>\n          </TouchableOpacity>\n        </ScrollView>\n      </KeyboardView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  content: {\n    flex: 1,\n  },\n  contentContainerStyle: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    padding: 16,\n  },\n  titleText: {\n    fontSize: 42,\n    fontFamily: \"default-light\",\n    marginBottom: 24,\n  },\n  registerButton: {\n    alignSelf: \"center\",\n    marginTop: 12,\n    paddingVertical: 12,\n    paddingHorizontal: 32,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}