{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\n\nvar login = function login(username, password) {\n  var _result$data, result;\n\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(\"auth/login\", {\n            username: username,\n            password: password\n          }));\n\n        case 3:\n          result = _context.sent;\n\n          if (!(result != null && (_result$data = result.data) != null && _result$data.error)) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Promise.reject(Error(result.data.error.message)));\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(AsyncStorage.multiSet([[\"User\", JSON.stringify(result.data.user)], [\"AccessToken\", result.data.token]]));\n\n        case 8:\n          return _context.abrupt(\"return\", Promise.resolve(result.data.user));\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\n\nvar register = function register(firstName, lastName, email, username, password) {\n  var _result$data2, result, user;\n\n  return _regeneratorRuntime.async(function register$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(\"auth/register\", {\n            firstName: firstName,\n            lastName: lastName,\n            email: email,\n            username: username,\n            password: password\n          }));\n\n        case 3:\n          result = _context2.sent;\n\n          if (!(result != null && (_result$data2 = result.data) != null && _result$data2.error)) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", Promise.reject(Error(result.data.error.message)));\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(login(username, password));\n\n        case 8:\n          user = _context2.sent;\n          return _context2.abrupt(\"return\", Promise.resolve(user));\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", Promise.reject(_context2.t0));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 12]], Promise);\n};\n\nexport default {\n  login: login,\n  register: register\n};","map":{"version":3,"sources":["/Users/sumedhreddy/Documents/stealth/stealth-startup/src/services/AuthService.ts"],"names":["axios","AsyncStorage","login","username","password","post","result","data","error","Promise","reject","Error","message","multiSet","JSON","stringify","user","token","resolve","register","firstName","lastName","email"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;SACSC,Y;;AAIT,IAAMC,KAAK,GAAG,SAARA,KAAQ,CACZC,QADY,EAEZC,QAFY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAKWJ,KAAK,CAACK,IAAN,CAAW,YAAX,EAAyB;AAC5CF,YAAAA,QAAQ,EAARA,QAD4C;AAE5CC,YAAAA,QAAQ,EAARA;AAF4C,WAAzB,CALX;;AAAA;AAKJE,UAAAA,MALI;;AAAA,gBAUNA,MAVM,4BAUNA,MAAM,CAAEC,IAVF,aAUN,aAAcC,KAVR;AAAA;AAAA;AAAA;;AAAA,2CAWDC,OAAO,CAACC,MAAR,CAAeC,KAAK,CAACL,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkBI,OAAnB,CAApB,CAXC;;AAAA;AAAA;AAAA,2CAcJX,YAAY,CAACY,QAAb,CAAsB,CAC1B,CAAC,MAAD,EAASC,IAAI,CAACC,SAAL,CAAeT,MAAM,CAACC,IAAP,CAAYS,IAA3B,CAAT,CAD0B,EAE1B,CAAC,aAAD,EAAgBV,MAAM,CAACC,IAAP,CAAYU,KAA5B,CAF0B,CAAtB,CAdI;;AAAA;AAAA,2CAmBHR,OAAO,CAACS,OAAR,CAAgBZ,MAAM,CAACC,IAAP,CAAYS,IAA5B,CAnBG;;AAAA;AAAA;AAAA;AAAA,2CAqBHP,OAAO,CAACC,MAAR,aArBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAyBA,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CACfC,SADe,EAEfC,QAFe,EAGfC,KAHe,EAIfnB,QAJe,EAKfC,QALe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAQQJ,KAAK,CAACK,IAAN,CAAW,eAAX,EAA4B;AAC/Ce,YAAAA,SAAS,EAATA,SAD+C;AAE/CC,YAAAA,QAAQ,EAARA,QAF+C;AAG/CC,YAAAA,KAAK,EAALA,KAH+C;AAI/CnB,YAAAA,QAAQ,EAARA,QAJ+C;AAK/CC,YAAAA,QAAQ,EAARA;AAL+C,WAA5B,CARR;;AAAA;AAQPE,UAAAA,MARO;;AAAA,gBAeTA,MAfS,6BAeTA,MAAM,CAAEC,IAfC,aAeT,cAAcC,KAfL;AAAA;AAAA;AAAA;;AAAA,4CAgBJC,OAAO,CAACC,MAAR,CAAeC,KAAK,CAACL,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkBI,OAAnB,CAApB,CAhBI;;AAAA;AAAA;AAAA,2CAkBMV,KAAK,CAACC,QAAD,EAAWC,QAAX,CAlBX;;AAAA;AAkBPY,UAAAA,IAlBO;AAAA,4CAmBNP,OAAO,CAACS,OAAR,CAAgBF,IAAhB,CAnBM;;AAAA;AAAA;AAAA;AAAA,4CAqBNP,OAAO,CAACC,MAAR,cArBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAyBA,eAAe;AACbR,EAAAA,KAAK,EAALA,KADa;AAEbiB,EAAAA,QAAQ,EAARA;AAFa,CAAf","sourcesContent":["import axios from \"axios\";\nimport { AsyncStorage } from \"react-native\";\n\nimport { UserModel } from \"../models\";\n\nconst login = async (\n  username: string,\n  password: string\n): Promise<UserModel> => {\n  try {\n    const result = await axios.post(\"auth/login\", {\n      username,\n      password,\n    });\n\n    if (result?.data?.error) {\n      return Promise.reject(Error(result.data.error.message));\n    }\n\n    await AsyncStorage.multiSet([\n      [\"User\", JSON.stringify(result.data.user)],\n      [\"AccessToken\", result.data.token],\n    ]);\n\n    return Promise.resolve(result.data.user);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nconst register = async (\n  firstName: string,\n  lastName: string,\n  email: string,\n  username: string,\n  password: string\n): Promise<UserModel> => {\n  try {\n    const result = await axios.post(\"auth/register\", {\n      firstName,\n      lastName,\n      email,\n      username,\n      password,\n    });\n    if (result?.data?.error) {\n      return Promise.reject(Error(result.data.error.message));\n    }\n    const user = await login(username, password);\n    return Promise.resolve(user);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport default {\n  login,\n  register,\n};\n"]},"metadata":{},"sourceType":"module"}