{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sumedhreddy/Documents/stealth/stealth-startup/node_modules/@react-native-community/viewpager/js/ViewPager.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar Platform = ReactNative.Platform,\n    UIManager = ReactNative.UIManager;\n\nvar dismissKeyboard = require('react-native/Libraries/Utilities/dismissKeyboard');\n\nimport { childrenWithOverriddenStyle } from \"./utils\";\n\nvar NativeViewPager = require(\"./ViewPagerNativeComponent\");\n\nvar VIEW_PAGER_REF = 'viewPager';\nvar VIEW_MANAGER_NAME = 'RNCViewPager';\n\nfunction getViewManagerConfig(viewManagerName) {\n  if (!UIManager.getViewManagerConfig) {\n    return UIManager[viewManagerName];\n  }\n\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\nvar ViewPager = function (_React$Component) {\n  _inherits(ViewPager, _React$Component);\n\n  var _super = _createSuper(ViewPager);\n\n  function ViewPager() {\n    var _this;\n\n    _classCallCheck(this, ViewPager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isScrolling = false;\n\n    _this.getInnerViewNode = function () {\n      return _this.refs[VIEW_PAGER_REF].getInnerViewNode();\n    };\n\n    _this._onPageScroll = function (e) {\n      if (_this.props.onPageScroll) {\n        _this.props.onPageScroll(e);\n      }\n\n      if (Platform.OS === 'android') {\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          dismissKeyboard();\n        }\n      }\n    };\n\n    _this._onPageScrollStateChanged = function (e) {\n      if (_this.props.onPageScrollStateChanged) {\n        _this.props.onPageScrollStateChanged(e);\n      }\n\n      _this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n    };\n\n    _this._onPageSelected = function (e) {\n      if (_this.props.onPageSelected) {\n        _this.props.onPageSelected(e);\n      }\n    };\n\n    _this.setPage = function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPage, [selectedPage]);\n    };\n\n    _this.setPageWithoutAnimation = function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPageWithoutAnimation, [selectedPage]);\n    };\n\n    _this.setScrollEnabled = function (scrollEnabled) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setScrollEnabled, [scrollEnabled]);\n    };\n\n    _this._onMoveShouldSetResponderCapture = function () {\n      if (Platform.OS === 'ios') {\n        return _this.isScrolling;\n      }\n\n      return false;\n    };\n\n    return _this;\n  }\n\n  _createClass(ViewPager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Platform.OS === 'android') {\n        if (this.props.initialPage != null) {\n          this.setPageWithoutAnimation(this.props.initialPage);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NativeViewPager, _extends({}, this.props, {\n        ref: VIEW_PAGER_REF,\n        style: this.props.style,\n        onPageScroll: this._onPageScroll,\n        onPageScrollStateChanged: this._onPageScrollStateChanged,\n        onPageSelected: this._onPageSelected,\n        onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture,\n        children: childrenWithOverriddenStyle(this.props.children),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return ViewPager;\n}(React.Component);\n\nmodule.exports = ViewPager;","map":{"version":3,"sources":["/Users/sumedhreddy/Documents/stealth/stealth-startup/node_modules/@react-native-community/viewpager/js/ViewPager.js"],"names":["React","require","Platform","ReactNative","UIManager","dismissKeyboard","childrenWithOverriddenStyle","NativeViewPager","VIEW_PAGER_REF","VIEW_MANAGER_NAME","getViewManagerConfig","viewManagerName","ViewPager","isScrolling","getInnerViewNode","refs","_onPageScroll","e","props","onPageScroll","OS","keyboardDismissMode","_onPageScrollStateChanged","onPageScrollStateChanged","nativeEvent","pageScrollState","_onPageSelected","onPageSelected","setPage","selectedPage","dispatchViewManagerCommand","findNodeHandle","Commands","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","_onMoveShouldSetResponderCapture","initialPage","style","children","Component","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;AASA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;AAGA,IAAOC,QAAP,GAA8BC,WAA9B,CAAOD,QAAP;AAAA,IAAiBE,SAAjB,GAA8BD,WAA9B,CAAiBC,SAAjB;;AAEA,IAAMC,eAAe,GAAGJ,OAAO,CAAC,kDAAD,CAA/B;;AAEA,SAAQK,2BAAR;;AAEA,IAAMC,eAAe,GAAGN,OAAO,8BAA/B;;AAEA,IAAMO,cAAc,GAAG,WAAvB;AACA,IAAMC,iBAAiB,GAAG,cAA1B;;AAEA,SAASC,oBAAT,CAA8BC,eAA9B,EAA+C;AAC7C,MAAI,CAACP,SAAS,CAACM,oBAAf,EAAqC;AAGnC,WAAON,SAAS,CAACO,eAAD,CAAhB;AACD;;AACD,SAAOP,SAAS,CAACM,oBAAV,CAA+BC,eAA/B,CAAP;AACD;;IA4CKC,S;;;;;;;;;;;;;;;UACJC,W,GAAc,K;;UAadC,gB,GAAmB,YAAsB;AACvC,aAAO,MAAKC,IAAL,CAAUP,cAAV,EAA0BM,gBAA1B,EAAP;AACD,K;;UAEDE,a,GAAgB,UAACC,CAAD,EAAwB;AACtC,UAAI,MAAKC,KAAL,CAAWC,YAAf,EAA6B;AAC3B,cAAKD,KAAL,CAAWC,YAAX,CAAwBF,CAAxB;AACD;;AAED,UAAIf,QAAQ,CAACkB,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,MAAKF,KAAL,CAAWG,mBAAX,KAAmC,SAAvC,EAAkD;AAChDhB,UAAAA,eAAe;AAChB;AACF;AACF,K;;UAEDiB,yB,GAA4B,UAACL,CAAD,EAAoC;AAC9D,UAAI,MAAKC,KAAL,CAAWK,wBAAf,EAAyC;AACvC,cAAKL,KAAL,CAAWK,wBAAX,CAAoCN,CAApC;AACD;;AACD,YAAKJ,WAAL,GAAmBI,CAAC,CAACO,WAAF,CAAcC,eAAd,KAAkC,UAArD;AACD,K;;UAEDC,e,GAAkB,UAACT,CAAD,EAA0B;AAC1C,UAAI,MAAKC,KAAL,CAAWS,cAAf,EAA+B;AAC7B,cAAKT,KAAL,CAAWS,cAAX,CAA0BV,CAA1B;AACD;AACF,K;;UAMDW,O,GAAU,UAACC,YAAD,EAA0B;AAClCzB,MAAAA,SAAS,CAAC0B,0BAAV,CACE3B,WAAW,CAAC4B,cAAZ,+BADF,EAEErB,oBAAoB,CAACD,iBAAD,CAApB,CAAwCuB,QAAxC,CAAiDJ,OAFnD,EAGE,CAACC,YAAD,CAHF;AAKD,K;;UAMDI,uB,GAA0B,UAACJ,YAAD,EAA0B;AAClDzB,MAAAA,SAAS,CAAC0B,0BAAV,CACE3B,WAAW,CAAC4B,cAAZ,+BADF,EAEErB,oBAAoB,CAACD,iBAAD,CAApB,CAAwCuB,QAAxC,CAAiDC,uBAFnD,EAGE,CAACJ,YAAD,CAHF;AAKD,K;;UAODK,gB,GAAmB,UAACC,aAAD,EAA4B;AAC7C/B,MAAAA,SAAS,CAAC0B,0BAAV,CACE3B,WAAW,CAAC4B,cAAZ,+BADF,EAEErB,oBAAoB,CAACD,iBAAD,CAApB,CAAwCuB,QAAxC,CAAiDE,gBAFnD,EAGE,CAACC,aAAD,CAHF;AAKD,K;;UAEDC,gC,GAAmC,YAAM;AACvC,UAAIlC,QAAQ,CAACkB,EAAT,KAAgB,KAApB,EAA2B;AACzB,eAAO,MAAKP,WAAZ;AACD;;AACD,aAAO,KAAP;AACD,K;;;;;;;WAlFD,6BAAoB;AAElB,UAAIX,QAAQ,CAACkB,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,KAAKF,KAAL,CAAWmB,WAAX,IAA0B,IAA9B,EAAoC;AAClC,eAAKJ,uBAAL,CAA6B,KAAKf,KAAL,CAAWmB,WAAxC;AACD;AACF;AACF;;;WA6ED,kBAAS;AACP,aACE,oBAAC,eAAD,eACM,KAAKnB,KADX;AAEE,QAAA,GAAG,EAAEV,cAFP;AAGE,QAAA,KAAK,EAAE,KAAKU,KAAL,CAAWoB,KAHpB;AAIE,QAAA,YAAY,EAAE,KAAKtB,aAJrB;AAKE,QAAA,wBAAwB,EAAE,KAAKM,yBALjC;AAME,QAAA,cAAc,EAAE,KAAKI,eANvB;AAOE,QAAA,+BAA+B,EAAE,KAAKU,gCAPxC;AAQE,QAAA,QAAQ,EAAE9B,2BAA2B,CAAC,KAAKY,KAAL,CAAWqB,QAAZ,CARvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAYD;;;;EApGqBvC,KAAK,CAACwC,S;;AAuG9BC,MAAM,CAACC,OAAP,GAAiB9B,SAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {\n  PageScrollEvent,\n  PageScrollStateChangedEvent,\n  PageSelectedEvent,\n  ViewPagerProps,\n} from './types';\n\nconst React = require('react');\nconst ReactNative = require('react-native');\n\nconst {Platform, UIManager} = ReactNative;\n\nconst dismissKeyboard = require('react-native/Libraries/Utilities/dismissKeyboard');\n\nimport {childrenWithOverriddenStyle} from './utils';\n\nconst NativeViewPager = require('./ViewPagerNativeComponent');\n\nconst VIEW_PAGER_REF = 'viewPager';\nconst VIEW_MANAGER_NAME = 'RNCViewPager';\n\nfunction getViewManagerConfig(viewManagerName) {\n  if (!UIManager.getViewManagerConfig) {\n    // react-native <= 0.57\n    // $FlowFixMe\n    return UIManager[viewManagerName];\n  }\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `ViewPager` will be treated as a separate page\n * and will be stretched to fill the `ViewPager`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <ViewPager\n *       style={styles.viewPager}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </ViewPager>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   viewPager: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\n\nclass ViewPager extends React.Component<ViewPagerProps> {\n  isScrolling = false;\n\n  componentDidMount() {\n    // On iOS we do it directly on the native side\n    if (Platform.OS === 'android') {\n      if (this.props.initialPage != null) {\n        this.setPageWithoutAnimation(this.props.initialPage);\n      }\n    }\n  }\n\n  /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n   * when making Flow check .android.js files. */\n  getInnerViewNode = (): ReactComponent => {\n    return this.refs[VIEW_PAGER_REF].getInnerViewNode();\n  };\n\n  _onPageScroll = (e: PageScrollEvent) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n    // Not implemented on iOS yet\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n    }\n  };\n\n  _onPageScrollStateChanged = (e: PageScrollStateChangedEvent) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e);\n    }\n    this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  _onPageSelected = (e: PageSelectedEvent) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will be animated.\n   */\n  setPage = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPage,\n      [selectedPage],\n    );\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will *not* be animated.\n   */\n  setPageWithoutAnimation = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPageWithoutAnimation,\n      [selectedPage],\n    );\n  };\n\n  /**\n   * A helper function to enable/disable scroll imperatively\n   * The recommended way is using the scrollEnabled prop, however, there might be a case where a\n   * imperative solution is more useful (e.g. for not blocking an animation)\n   */\n  setScrollEnabled = (scrollEnabled: boolean) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setScrollEnabled,\n      [scrollEnabled],\n    );\n  };\n\n  _onMoveShouldSetResponderCapture = () => {\n    if (Platform.OS === 'ios') {\n      return this.isScrolling;\n    }\n    return false;\n  };\n\n  render() {\n    return (\n      <NativeViewPager\n        {...this.props}\n        ref={VIEW_PAGER_REF}\n        style={this.props.style}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        onMoveShouldSetResponderCapture={this._onMoveShouldSetResponderCapture}\n        children={childrenWithOverriddenStyle(this.props.children)}\n      />\n    );\n  }\n}\n\nmodule.exports = ViewPager;\n"]},"metadata":{},"sourceType":"module"}