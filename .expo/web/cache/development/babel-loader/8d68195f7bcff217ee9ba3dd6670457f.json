{"ast":null,"code":"import i18n from \"i18next\";\nimport moment from \"moment\";\nimport { initReactI18next, useTranslation } from \"react-i18next\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport * as Updates from \"expo-updates\";\n\nrequire(\"moment/locale/ar.js\");\n\nvar I18N_NAME_SPACE = \"translation\";\nvar currentLang;\nexport var initLocalization = function initLocalization(lang) {\n  currentLang = lang;\n  i18n.use(initReactI18next).init({\n    resources: {},\n    lng: lang.lang,\n    fallbackLng: \"en\",\n    ns: I18N_NAME_SPACE,\n    interpolation: {\n      escapeValue: false\n    }\n  });\n  i18n.addResources(\"en\", I18N_NAME_SPACE, require(\"./locales/en.json\"));\n  i18n.addResources(\"ar\", I18N_NAME_SPACE, require(\"./locales/ar.json\"));\n  moment.locale(i18n.hasResourceBundle(lang.lang, I18N_NAME_SPACE) ? lang.lang : \"en\");\n  I18nManager.allowRTL(lang.isRTL);\n  I18nManager.forceRTL(lang.isRTL);\n};\nexport var useLocalization = function useLocalization() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  return {\n    getString: function getString(key, options) {\n      return t(key, options);\n    },\n    changeLanguage: function changeLanguage(lang) {\n      AsyncStorage.setItem(\"APP_LANGUAGE\", lang.lang).then(function () {\n        moment.locale(lang.lang);\n        i18n.changeLanguage(lang.lang);\n\n        if (currentLang && currentLang.isRTL !== lang.isRTL) {\n          I18nManager.allowRTL(lang.isRTL);\n          I18nManager.forceRTL(lang.isRTL);\n          Updates.reloadAsync();\n        }\n      });\n    },\n    currentLanguage: function currentLanguage() {\n      return i18n.language;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sumedhreddy/Documents/stealth/stealth-startup/src/localization/Localization.ts"],"names":["i18n","moment","initReactI18next","useTranslation","AsyncStorage","Updates","require","I18N_NAME_SPACE","currentLang","initLocalization","lang","use","init","resources","lng","fallbackLng","ns","interpolation","escapeValue","addResources","locale","hasResourceBundle","I18nManager","allowRTL","isRTL","forceRTL","useLocalization","t","getString","key","options","changeLanguage","setItem","then","reloadAsync","currentLanguage","language"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,eAAjD;;SACsBC,Y;AACtB,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;;AAEAC,OAAO,CAAC,qBAAD,CAAP;;AAEA,IAAMC,eAAe,GAAG,aAAxB;AAEA,IAAIC,WAAJ;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAyB;AACvDF,EAAAA,WAAW,GAAGE,IAAd;AACAV,EAAAA,IAAI,CAACW,GAAL,CAAST,gBAAT,EAA2BU,IAA3B,CAAgC;AAC9BC,IAAAA,SAAS,EAAE,EADmB;AAE9BC,IAAAA,GAAG,EAAEJ,IAAI,CAACA,IAFoB;AAG9BK,IAAAA,WAAW,EAAE,IAHiB;AAI9BC,IAAAA,EAAE,EAAET,eAJ0B;AAK9BU,IAAAA,aAAa,EAAE;AACbC,MAAAA,WAAW,EAAE;AADA;AALe,GAAhC;AAUAlB,EAAAA,IAAI,CAACmB,YAAL,CAAkB,IAAlB,EAAwBZ,eAAxB,EAAyCD,OAAO,qBAAhD;AACAN,EAAAA,IAAI,CAACmB,YAAL,CAAkB,IAAlB,EAAwBZ,eAAxB,EAAyCD,OAAO,qBAAhD;AAEAL,EAAAA,MAAM,CAACmB,MAAP,CACEpB,IAAI,CAACqB,iBAAL,CAAuBX,IAAI,CAACA,IAA5B,EAAkCH,eAAlC,IAAqDG,IAAI,CAACA,IAA1D,GAAiE,IADnE;AAIAY,EAAAA,WAAW,CAACC,QAAZ,CAAqBb,IAAI,CAACc,KAA1B;AACAF,EAAAA,WAAW,CAACG,QAAZ,CAAqBf,IAAI,CAACc,KAA1B;AACD,CArBM;AAuBP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,wBAAoBvB,cAAc,EAAlC;AAAA,MAAQwB,CAAR,mBAAQA,CAAR;AAAA,MAAW3B,IAAX,mBAAWA,IAAX;;AACA,SAAO;AACL4B,IAAAA,SAAS,EAAE,mBAACC,GAAD,EAAcC,OAAd;AAAA,aAAgCH,CAAC,CAACE,GAAD,EAAMC,OAAN,CAAjC;AAAA,KADN;AAELC,IAAAA,cAAc,EAAE,wBAACrB,IAAD,EAAyB;AACvCN,MAAAA,YAAY,CAAC4B,OAAb,CAAqB,cAArB,EAAqCtB,IAAI,CAACA,IAA1C,EAAgDuB,IAAhD,CAAqD,YAAM;AACzDhC,QAAAA,MAAM,CAACmB,MAAP,CAAcV,IAAI,CAACA,IAAnB;AACAV,QAAAA,IAAI,CAAC+B,cAAL,CAAoBrB,IAAI,CAACA,IAAzB;;AACA,YAAIF,WAAW,IAAIA,WAAW,CAACgB,KAAZ,KAAsBd,IAAI,CAACc,KAA9C,EAAqD;AACnDF,UAAAA,WAAW,CAACC,QAAZ,CAAqBb,IAAI,CAACc,KAA1B;AACAF,UAAAA,WAAW,CAACG,QAAZ,CAAqBf,IAAI,CAACc,KAA1B;AACAnB,UAAAA,OAAO,CAAC6B,WAAR;AACD;AACF,OARD;AASD,KAZI;AAaLC,IAAAA,eAAe,EAAE;AAAA,aAAMnC,IAAI,CAACoC,QAAX;AAAA;AAbZ,GAAP;AAeD,CAjBM","sourcesContent":["import i18n from \"i18next\";\nimport moment from \"moment\";\nimport { initReactI18next, useTranslation } from \"react-i18next\";\nimport { I18nManager, AsyncStorage } from \"react-native\";\nimport * as Updates from \"expo-updates\";\nimport { LanguageModel } from \"../models\";\nrequire(\"moment/locale/ar.js\");\n\nconst I18N_NAME_SPACE = \"translation\";\n\nvar currentLang: LanguageModel;\n\nexport const initLocalization = (lang: LanguageModel) => {\n  currentLang = lang;\n  i18n.use(initReactI18next).init({\n    resources: {},\n    lng: lang.lang,\n    fallbackLng: \"en\",\n    ns: I18N_NAME_SPACE,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\n  i18n.addResources(\"en\", I18N_NAME_SPACE, require(\"./locales/en.json\"));\n  i18n.addResources(\"ar\", I18N_NAME_SPACE, require(\"./locales/ar.json\"));\n\n  moment.locale(\n    i18n.hasResourceBundle(lang.lang, I18N_NAME_SPACE) ? lang.lang : \"en\"\n  );\n\n  I18nManager.allowRTL(lang.isRTL);\n  I18nManager.forceRTL(lang.isRTL);\n};\n\nexport const useLocalization = () => {\n  const { t, i18n } = useTranslation();\n  return {\n    getString: (key: string, options?: any) => t(key, options),\n    changeLanguage: (lang: LanguageModel) => {\n      AsyncStorage.setItem(\"APP_LANGUAGE\", lang.lang).then(() => {\n        moment.locale(lang.lang);\n        i18n.changeLanguage(lang.lang);\n        if (currentLang && currentLang.isRTL !== lang.isRTL) {\n          I18nManager.allowRTL(lang.isRTL);\n          I18nManager.forceRTL(lang.isRTL);\n          Updates.reloadAsync();\n        }\n      });\n    },\n    currentLanguage: () => i18n.language,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}