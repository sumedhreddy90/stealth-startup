{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sumedhreddy/Documents/stealth/stealth-startup/App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport * as Font from \"expo-font\";\nimport * as ExpoLocalization from \"expo-localization\";\nimport { AppNavigator, configureGlobalTypography, initLocalization, ThemeContext, Themes } from \"./src\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { LogBox } from \"react-native-web/dist/index\";\nimport { FavoritedNewsProvider, AuthenticationProvider } from \"./src/context\";\nimport { LoadingLayout, LoadingManager } from \"./src/presentation\";\nimport axios from \"axios\";\nimport { API_URL, getLang } from \"./src/constants\";\nLogBox.ignoreAllLogs();\naxios.defaults.baseURL = API_URL;\naxios.interceptors.request.use(function (config) {\n  LoadingManager.showLoading();\n  return config;\n}, function (err) {\n  LoadingManager.hideLoading();\n  return Promise.reject(err);\n});\naxios.interceptors.response.use(function (config) {\n  LoadingManager.hideLoading();\n  return config;\n}, function (err) {\n  LoadingManager.hideLoading();\n  return Promise.reject(err);\n});\n\nvar App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFontLoaded = _useState2[0],\n      setIsFontLoaded = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(Themes.light),\n      _useState6 = _slicedToArray(_useState5, 2),\n      theme = _useState6[0],\n      setTheme = _useState6[1];\n\n  useEffect(function () {\n    AsyncStorage.multiGet([\"APP_LANGUAGE\", \"THEME\"]).then(function (response) {\n      var _appLang = response[0][1];\n      var _theme = response[1][1];\n\n      if (_theme === undefined || _theme === null) {\n        setTheme(Themes.light);\n      } else {\n        setTheme(_theme === \"dark\" ? Themes.dark : Themes.light);\n      }\n\n      if (_appLang === undefined || _appLang === null) {\n        _appLang = ExpoLocalization.locale.split(\"-\")[0];\n      }\n\n      var availableLang = getLang(_appLang);\n      initLocalization(availableLang);\n      Font.loadAsync({\n        \"default-thin\": require(\"./assets/fonts/mada-thin.ttf\"),\n        \"default-light\": require(\"./assets/fonts/mada-light.ttf\"),\n        \"default-regular\": require(\"./assets/fonts/mada-regular.ttf\"),\n        \"default-medium\": require(\"./assets/fonts/mada-medium.ttf\"),\n        \"default-bold\": require(\"./assets/fonts/mada-bold.ttf\"),\n        \"default-black\": require(\"./assets/fonts/mada-black.ttf\")\n      }).then(function () {\n        return setIsFontLoaded(true);\n      });\n    });\n    AsyncStorage.multiGet([\"AccessToken\", \"User\"]).then(function (response) {\n      var _accessToken = response[0][1];\n      var _user = response[1][1];\n\n      if (_accessToken && _user) {\n        axios.defaults.headers[\"Authorization\"] = \"Bearer \" + _accessToken;\n        setUser(JSON.parse(_user));\n      }\n    });\n  }, []);\n\n  if (!isFontLoaded) {\n    return null;\n  }\n\n  configureGlobalTypography();\n  return React.createElement(React.Fragment, null, React.createElement(StatusBar, {\n    barStyle: \"dark-content\",\n    translucent: true,\n    backgroundColor: \"transparent\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), React.createElement(AuthenticationProvider, {\n    user: user,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, React.createElement(ThemeContext.Provider, {\n    value: _objectSpread(_objectSpread({}, theme), {}, {\n      changeTheme: function changeTheme(isDark) {\n        AsyncStorage.setItem(\"THEME\", isDark ? \"dark\" : \"light\");\n        setTheme(isDark ? Themes.dark : Themes.light);\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, React.createElement(FavoritedNewsProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, React.createElement(AppNavigator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  })), React.createElement(LoadingLayout, {\n    ref: function ref(_ref) {\n      return LoadingManager.setLoadingView(_ref);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/sumedhreddy/Documents/stealth/stealth-startup/App.tsx"],"names":["React","useState","useEffect","Font","ExpoLocalization","AppNavigator","configureGlobalTypography","initLocalization","ThemeContext","Themes","AsyncStorage","LogBox","FavoritedNewsProvider","AuthenticationProvider","LoadingLayout","LoadingManager","axios","API_URL","getLang","ignoreAllLogs","defaults","baseURL","interceptors","request","use","config","showLoading","err","hideLoading","Promise","reject","response","App","isFontLoaded","setIsFontLoaded","user","setUser","light","theme","setTheme","multiGet","then","_appLang","_theme","undefined","dark","locale","split","availableLang","loadAsync","require","_accessToken","_user","headers","JSON","parse","changeTheme","isDark","setItem","ref","setLoadingView"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as Font from \"expo-font\";\nimport * as ExpoLocalization from \"expo-localization\";\nimport {\n  AppNavigator,\n  configureGlobalTypography,\n  initLocalization,\n  ThemeContext,\n  Themes,\n} from \"./src\";\nimport { StatusBar, AsyncStorage, LogBox } from \"react-native\";\nimport { FavoritedNewsProvider, AuthenticationProvider } from \"./src/context\";\nimport { LoadingLayout, LoadingManager } from \"./src/presentation\";\nimport axios from \"axios\";\nimport { API_URL, getLang } from \"./src/constants\";\nimport { UserModel } from \"./src/models\";\n\nLogBox.ignoreAllLogs()\n\naxios.defaults.baseURL = API_URL;\naxios.interceptors.request.use(\n  (config) => {\n    LoadingManager.showLoading();\n    return config;\n  },\n  (err) => {\n    LoadingManager.hideLoading();\n    return Promise.reject(err);\n  }\n);\n\naxios.interceptors.response.use(\n  (config) => {\n    LoadingManager.hideLoading();\n    return config;\n  },\n  (err) => {\n    LoadingManager.hideLoading();\n    return Promise.reject(err);\n  }\n);\n\nconst App = () => {\n  const [isFontLoaded, setIsFontLoaded] = useState(false);\n  const [user, setUser] = useState<UserModel>();\n  const [theme, setTheme] = useState(Themes.light);\n\n  useEffect(() => {\n    AsyncStorage.multiGet([\"APP_LANGUAGE\", \"THEME\"]).then((response) => {\n      var _appLang = response[0][1];\n      const _theme = response[1][1];\n\n      if (_theme === undefined || _theme === null) {\n        setTheme(Themes.light);\n      } else {\n        setTheme(_theme === \"dark\" ? Themes.dark : Themes.light);\n      }\n\n      if (_appLang === undefined || _appLang === null) {\n        _appLang = ExpoLocalization.locale.split(\"-\")[0];\n      }\n      const availableLang = getLang(_appLang);\n      initLocalization(availableLang);\n\n      Font.loadAsync({\n        \"default-thin\": require(\"./assets/fonts/mada-thin.ttf\"),\n        \"default-light\": require(\"./assets/fonts/mada-light.ttf\"),\n        \"default-regular\": require(\"./assets/fonts/mada-regular.ttf\"),\n        \"default-medium\": require(\"./assets/fonts/mada-medium.ttf\"),\n        \"default-bold\": require(\"./assets/fonts/mada-bold.ttf\"),\n        \"default-black\": require(\"./assets/fonts/mada-black.ttf\"),\n      }).then(() => setIsFontLoaded(true));\n    });\n\n    AsyncStorage.multiGet([\"AccessToken\", \"User\"]).then((response) => {\n      const _accessToken = response[0][1];\n      const _user = response[1][1];\n\n      if (_accessToken && _user) {\n        axios.defaults.headers[\"Authorization\"] = \"Bearer \" + _accessToken;\n        setUser(JSON.parse(_user));\n      }\n    });\n  }, []);\n\n  if (!isFontLoaded) {\n    return null;\n  }\n\n  configureGlobalTypography();\n\n  return (\n    <>\n      <StatusBar\n        barStyle=\"dark-content\"\n        translucent\n        backgroundColor=\"transparent\"\n      />\n      <AuthenticationProvider user={user}>\n        <ThemeContext.Provider\n          value={{\n            ...theme,\n            changeTheme: (isDark: boolean) => {\n              AsyncStorage.setItem(\"THEME\", isDark ? \"dark\" : \"light\");\n              setTheme(isDark ? Themes.dark : Themes.light);\n            },\n          }}\n        >\n          <FavoritedNewsProvider>\n            <AppNavigator />\n          </FavoritedNewsProvider>\n          <LoadingLayout ref={(ref) => LoadingManager.setLoadingView(ref!!)} />\n        </ThemeContext.Provider>\n      </AuthenticationProvider>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}